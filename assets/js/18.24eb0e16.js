(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{452:function(e,t,a){"use strict";a.r(t);var s=a(43),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Last year I co-authored the "),a("a",{attrs:{href:"http://www.vldb.org/pvldb/vol14/p431-he.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Corobase"),a("OutboundLink")],1),e._v(" paper\nwhich was published on PVLDB 2021.\nThe paper describes the approach to hide data stalls in an in-memory database with "),a("a",{attrs:{href:"https://en.cppreference.com/w/cpp/language/coroutines",target:"_blank",rel:"noopener noreferrer"}},[e._v("stackless coroutine"),a("OutboundLink")],1),e._v(".\nStill, there left several open questions, for example, how to properly inline a coroutine,\nwhich this post may help you to understand.")]),e._v(" "),a("h2",{attrs:{id:"stackless-coroutine"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stackless-coroutine"}},[e._v("#")]),e._v(" Stackless coroutine")]),e._v(" "),a("p",[e._v("First, what is coroutine? Coroutine was born in the early days of computers, as a sibling of Function.\nFunction is one-shot subroutine,\nwhile Coroutine can be suspended in the middle to return to the caller and then get resumed some time later.\nStackless coroutine is opposed to stackful coroutine.\nThey are different implementations of coroutine.")]),e._v(" "),a("p",[e._v("Most of the libraries implement coroutine and fiber (coroutine on thread executors) with stackful coroutine, for example Boost::Coroutine.\nStackful coroutine allocates another stack dedicated to a coroutine context.\nThe side stack is identical to the process stack,\nwhich uses frame pointer, stack pointer, etc. to manage coroutine call stack.\nStackful coroutine can be easily suspended because all the coroutine's states resides in the coroutine stack\nand never interfere with the process stack.")]),e._v(" "),a("p",[e._v("Stackless coroutine implementation has no side stacks.\nStack frame of a coroutine call lies on the process stack.\nThis design makes coroutine cheaper to call, suspend and resume than its stackful peer,\nwhere the latter has a larger memory footprint and requires dynamic allocations when stack grows.\nHowever, running coroutine on the process stack makes suspending and resuming not straightforward.\nEach time the coroutine get resumed, a new stack frame is pushed to the stack.\nBut there are runtime states, such as value of local variables that lives across suspendings.\nObviously, the states can not be saved not on the stack,\notherwise they quickly gets overwritten by function calls following coroutine suspending.")]),e._v(" "),a("p",[e._v("The clang(LLVM)'s implementation of stackless coroutine dynamic allocates the memory called coroutine frame\nfor keeping the states.\nLocal variables are saved to the coroutine frame on suspending and reloaded back to the process stack on resuming.\nOther states like return value and whether suspendable go to the coroutine frame as well.")]),e._v(" "),a("h2",{attrs:{id:"coroutine-to-hide-data-stall"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#coroutine-to-hide-data-stall"}},[e._v("#")]),e._v(" Coroutine to hide data stall")]),e._v(" "),a("p",[e._v('The clang\'s implementation of stackless coroutine has very cheap context switches\n(not the same "context-switch" in multi-threading,\nhere it means suspending from a coroutine and resuming another one).\nI am not able to find the exact timing of a context switch,\nbut it is definitely cheaper than a last level cache-miss\non modern server CPUs (which actually have lower frequency than desktop ones) and latest DRAMs.')]),e._v(" "),a("p",[e._v("The fact leads to the idea about hiding memory stalls with coroutine-alike executions.\nBasically, on data loading where cache miss is very likely to happen,\nissue a memory prefetch following a coroutine suspend (Note, suspending is unconditionally.\nThere is no way for any arch to tell by definite whether the data is going to miss).\nSo that data is getting loaded from memory to cache, in the meantime that data won't be used by CPU at the moment,\nand no data stalls.\nWhen the next time, this suspended coroutine gets resumed, hopefully the loading data is already in cache.")]),e._v(" "),a("p",[e._v("As far as I know, the technique started from\n"),a("a",{attrs:{href:"https://dl.acm.org/doi/10.14778/2856318.2856321#:~:text=This%20work%20introduces%20Asynchronous%20Memory,from%20that%20of%20other%20lookups.",target:"_blank",rel:"noopener noreferrer"}},[e._v("Asynchronous Memory Access Chaining"),a("OutboundLink")],1),e._v("\nwhich manages a state-machine-alike AMAC by hand to do suspending and resuming,\nthen followed by\n"),a("a",{attrs:{href:"http://www.vldb.org/pvldb/vol11/p230-psaropoulos.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Interleaving with Coroutines: A Practical Approach for Robust Index Joins"),a("OutboundLink")],1),e._v("\nto replace AMAC with stackless coroutine and confirmed its effectiveness on Binary Search,\nand then\n"),a("a",{attrs:{href:"http://www.vldb.org/pvldb/vol11/p1702-jonathan.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Exploiting Coroutines to Attack the “Killer Nanoseconds”"),a("OutboundLink")],1),e._v("\nevaluates stackless coroutine on Masstree and BwTree.")]),e._v(" "),a("p",[a("a",{attrs:{href:"http://www.vldb.org/pvldb/vol14/p431-he.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Corobase"),a("OutboundLink")],1),e._v(" is a follow up work to employ the technique to the whole database.")]),e._v(" "),a("h2",{attrs:{id:"target-at-usability"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#target-at-usability"}},[e._v("#")]),e._v(" Target at usability")]),e._v(" "),a("p",[a("a",{attrs:{href:"http://www.vldb.org/pvldb/vol11/p1702-jonathan.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Exploiting Coroutines to Attack the “Killer Nanoseconds”"),a("OutboundLink")],1),e._v("\nis a great paper about hiding data stalls on complex indexing data structures such as Masstree,\nbut unfortunately it is not open sourced to use.")]),e._v(" "),a("p",[a("a",{attrs:{href:"http://www.vldb.org/pvldb/vol14/p431-he.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Corobase"),a("OutboundLink")],1),e._v(" has no ambition to surpass the performance of\n"),a("a",{attrs:{href:"http://www.vldb.org/pvldb/vol11/p1702-jonathan.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Exploiting Coroutines to Attack the “Killer Nanoseconds”"),a("OutboundLink")],1),e._v(".\nBecause in whole databases, coroutine not only needs to operate on the indexing Masstree\n(for people not familiar, it is a combination of B+Tree and Trie),\nbut also the value storage, in our case, MVCC\n(Multi-version concurrency control, each value is a linked list of different snapshots in different timestamps).\nComplex data structures lead to un-uniform (and larger) memory footprints and less regular cache misses.\nThat's the reality.")]),e._v(" "),a("p",[a("a",{attrs:{href:"http://www.vldb.org/pvldb/vol14/p431-he.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Corobase"),a("OutboundLink")],1),e._v(" does not want to be a proof of concept,\nothers already proved it well.\nIt wants to be really useful for industry, where a traditional database can make very limited modifications to use the coroutine.")]),e._v(" "),a("p",[e._v("In the "),a("a",{attrs:{href:"https://github.com/sfu-dis/Corobase/blob/81ddcf54a553e6feb6a706580d91574ec53870ab/dbcore/sm-coroutine.h#L517",target:"_blank",rel:"noopener noreferrer"}},[e._v("coroutine implementation"),a("OutboundLink")],1),e._v(", a normal function can be convert to a coroutine by:")]),e._v(" "),a("ol",[a("li",[e._v("Replace return type "),a("code",[e._v("T")]),e._v(" with "),a("code",[e._v("Promise(T)")]),e._v(" in function definition.")]),e._v(" "),a("li",[e._v("Insert "),a("code",[e._v("std::suspend_always")]),e._v(" and "),a("code",[e._v("prefetch")]),e._v(" on a data load that is highly likely to cause cache miss.")])]),e._v(" "),a("p",[e._v('We happily rollout this change to our previous non-coroutine database,\nHowever, we found it does not scale well with the level of function calls.\nNote, a nested stackless coroutine requires manual management of its call chain,\nso that each uncompleted coroutine in the chain gets resumed in the correct order.\nCorobase used a double linked list to do it, after comparing performance of stack, circular-array, etc.\nWe didn\'t manage to solve the scale problem in the end and falls back to a two-level approach,\nwhich basically needs to "inline" a chain of function calls into a big function by hand.\nRead the paper for the details if you are interested.')]),e._v(" "),a("h2",{attrs:{id:"inline-coroutine-in-llvm-possible"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inline-coroutine-in-llvm-possible"}},[e._v("#")]),e._v(" Inline Coroutine in LLVM, Possible?")]),e._v(" "),a("p",[e._v("The two-level approach works great on real world workloads with a reasonable amount of throughput improvement.\nBut it is not so good from the user perspective.\nInlining by hand to two-level, though very easy to do, should definitely be done by the compiler.")]),e._v(" "),a("p",[e._v("Automating inlining coroutine is not trivial.\nFor functions you can put "),a("code",[e._v("inline")]),e._v(" attributes to hint the compiler,\nthere is no way to do the same thing for a coroutine.\nCoroutine is not a function from the perspective of LLVM.\nIn the LLVM optimization passes,\ncoroutine get splitted to three functions in the name of "),a("code",[e._v("xxx.init()")]),e._v(", "),a("code",[e._v("xxx.resume()")]),e._v(" and "),a("code",[e._v("xxx.destroy()")]),e._v("\nright before CGSCC (call graph strongly connected components) pass.\nIn CGSCC, each splitted function may be inlined if they get devirtualized.\nRefer to "),a("a",{attrs:{href:"https://lists.llvm.org/pipermail/llvm-dev/2016-July/102337.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://lists.llvm.org/pipermail/llvm-dev/2016-July/102337.html"),a("OutboundLink")],1),e._v(" for the optimization passes design for coroutine.")]),e._v(" "),a("p",[e._v('Why "devirtualized"? Because C++ coroutine is manipulated through '),a("code",[e._v("coroutine_handle<promise_type_T>")]),e._v("\nor a generic handle "),a("code",[e._v("coroutine_handle<void>")]),e._v(".\nResume a coroutine by calling "),a("code",[e._v("coroutine_handle<void>.resume()")]),e._v(" is an indirect function call.\nVirtual function call can not be inlined.\nUnfortunately Corobase resumes every coroutine indirectly:")]),e._v(" "),a("ol",[a("li",[e._v("direct call "),a("a",{attrs:{href:"https://github.com/sfu-dis/Corobase/blob/81ddcf54a553e6feb6a706580d91574ec53870ab/masstree/masstree_get.hh#L64",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("co_await <expr>")]),a("OutboundLink")],1),e._v(" only reaches "),a("a",{attrs:{href:"https://github.com/sfu-dis/Corobase/blob/81ddcf54a553e6feb6a706580d91574ec53870ab/dbcore/sm-coroutine.h#L107",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("initial_suspend")]),a("OutboundLink")],1),e._v(" without doing any work.")]),e._v(" "),a("li",[e._v("in "),a("a",{attrs:{href:"https://github.com/sfu-dis/Corobase/blob/81ddcf54a553e6feb6a706580d91574ec53870ab/benchmarks/ycsb-cs-advance.cc#L76",target:"_blank",rel:"noopener noreferrer"}},[e._v("scheduler"),a("OutboundLink")],1),e._v(", where schedule the next coroutine resumption, every call is indirect.")])]),e._v(" "),a("p",[e._v("Will explain later why "),a("code",[e._v("initial_suspend")]),e._v(" is necessary and what happens if remove.")]),e._v(" "),a("h2",{attrs:{id:"how-to-improve"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#how-to-improve"}},[e._v("#")]),e._v(" How to improve?")]),e._v(" "),a("p",[e._v("The scheduler part is identical in both nested and two-level.\nSo if we can make every "),a("code",[e._v("co_await <expr>")]),e._v(" inlined,\nthen hopefully nested coroutine calls would have performance close to two-level ones.")]),e._v(" "),a("p",[e._v("The above fact is not that intuitive, more explaining:\nA chain of coroutines, whether two-level and nested,\nare all executed from "),a("code",[e._v("coroutine_handle<void>.resume()")]),e._v(" in "),a("code",[e._v("scheduler")]),e._v(".\nThe number of "),a("code",[e._v("coroutine_handle<void>.resume()")]),e._v(" gets called is same for two-level and nested,\nwhich depends on the added suspending points.\nTwo-level eliminites the function calls inside each "),a("code",[e._v("coroutine_handle<void>.resume()")]),e._v("\nwhich are the "),a("code",[e._v("co_await <expr>")]),e._v("s\n(and two-level made the assumption that the linked list can only has two nodes, but I think that is neglectable).")]),e._v(" "),a("p",[e._v("The following text describes some of my ideas and practices to try to inline the "),a("code",[e._v("co_await <expr>")]),e._v(".")]),e._v(" "),a("h4",{attrs:{id:"_1-immediately-resume-after-initial-suspend"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-immediately-resume-after-initial-suspend"}},[e._v("#")]),e._v(" 1) Immediately resume after initial_suspend")]),e._v(" "),a("p",[a("code",[e._v("co_await <expr>;")]),e._v(" internally is "),a("code",[e._v("awaitable_T awaitable_instance = <expr>; co_await awaitable_instance;")]),e._v(" "),a("code",[e._v("initial_suspend")]),e._v(" happens in "),a("code",[e._v("awaitable_instance")]),e._v("'s construction and\n"),a("code",[e._v("co_await")]),e._v(" translates to a "),a("code",[e._v("await_suspend()")]),e._v(" call on "),a("code",[e._v("awaitable_T::awaiter")]),e._v(".")]),e._v(" "),a("p",[e._v("In Corobase, "),a("code",[e._v("await_suspend()")]),e._v(" does nothing but establish the caller and callee relation,\nall the resuming are handled in the scheduler by indirect calls.")]),e._v(" "),a("p",[e._v("I tried to move the first "),a("code",[e._v("resume()")]),e._v(" textually close to the "),a("code",[e._v("awaitable_instance")]),e._v("'s construction,\nhoping the compiler is able to devirtualize the resuming call by referring to its local context.")]),e._v(" "),a("p",[e._v("The following lines of code get added in "),a("code",[e._v("awaitable_T::awaiter")]),e._v(".\nBecause of the "),a("code",[e._v("initial_suspend")]),e._v(", this resuming should always be a valid call.")]),e._v(" "),a("div",{staticClass:"language-Diff extra-class"},[a("pre",{pre:!0,attrs:{class:"language-diff"}},[a("code",[e._v("// suspended_task_coroutine points to coroutine being co_awaited on\n//\n// awaiting_coroutine points to the coroutine running co_await\n// (i.e. it waits for suspended_task_coroutine to complete first)\ntemplate <typename T> struct task<T>::awaiter {\n...\n"),a("span",{pre:!0,attrs:{class:"token unchanged"}},[e._v("  template <typename awaiting_promise_t>\n  auto await_suspend(std::experimental::coroutine_handle<awaiting_promise_t> awaiting_coroutine) noexcept {\n    suspended_task_coroutine_.promise().set_parent(&(awaiting_coroutine.promise()));\n")]),a("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[e._v("+   suspended_task_coroutine_.resume();\n+   // Force coroutine with no suspending points invalid.\n+   ASSERT(!suspended_task_coroutine_.done());\n")]),a("span",{pre:!0,attrs:{class:"token unchanged"}},[e._v("    return suspended_task_coroutine_;\n  }\n  \n  constexpr bool await_ready() const noexcept {\n      return false;\n  }\n")]),e._v("...\n};\n")])])]),a("p",[e._v("I compiled a simplified version of the "),a("a",{attrs:{href:"https://github.com/sfu-dis/Corobase/blob/81ddcf54a553e6feb6a706580d91574ec53870ab/tests/coroutine/resume_order.cpp",target:"_blank",rel:"noopener noreferrer"}},[e._v("sample"),a("OutboundLink")],1),e._v("\nand checked the generated LLVM IR in "),a("code",[e._v("-O3")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language-LLVM extra-class"},[a("pre",{pre:!0,attrs:{class:"language-llvm"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("; demangle to task<void> ChainedCoroCall<5>(int*).resume")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("define")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("internal")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("fastcc")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token type class-name"}},[e._v("void")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("@_Z15ChainedCoroCallILi5EE4taskIvEPi.resume")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("%_Z15ChainedCoroCallILi5EE4taskIvEPi.Frame")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("*")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("noalias")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("nonnull")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("align")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("8")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("dereferenceable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("432")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("%FramePtr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("#0")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("; demangle to promise_base::set_parent(promise_base*)")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token label"}},[e._v("_ZN12promise_base10set_parentEPS_.exit.i:")]),e._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("; preds = %init.ready")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("; demangle to task<void> ChainedCoroCall<4>(int*).resume")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("call")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("fastcc")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token type class-name"}},[e._v("void")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("@_Z15ChainedCoroCallILi4EE4taskIvEPi.resume")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("%_Z15ChainedCoroCallILi4EE4taskIvEPi.Frame")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("*")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("nonnull")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("%.reload.addr119")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("#2")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("; demangle to task<void> ChainedCoroCall<4>(int*).Frame")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("; direct call :)")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("%18")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("bitcast")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("%_Z15ChainedCoroCallILi4EE4taskIvEPi.Frame")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("*")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("%.reload.addr119")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("to")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token type class-name"}},[e._v("i8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("*")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("%19")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("load")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token type class-name"}},[e._v("i8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token type class-name"}},[e._v("i8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("*")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("%18")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("align")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("8")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("%20")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("icmp")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("eq")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token type class-name"}},[e._v("i8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("*")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("%19")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("null")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n  \n")])])]),a("p",[e._v("Compare to the resuming call in scheduler:")]),e._v(" "),a("div",{staticClass:"language-LLVM extra-class"},[a("pre",{pre:!0,attrs:{class:"language-llvm"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("; demangle to promise_base::get_leaf() const")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token label"}},[e._v("_ZNK12promise_base8get_leafEv.exit:")]),e._v("               "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("; preds = %_ZNK12promise_base8get_leafEv.exit64")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("%8")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("bitcast")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token type class-name"}},[e._v("i8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("*")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("%retval.sroa.0.0.copyload.i71")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("to")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token type class-name"}},[e._v("i8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token type class-name"}},[e._v("i8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("*")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("*")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("%9")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("getelementptr")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("inbounds")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token type class-name"}},[e._v("i8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token type class-name"}},[e._v("i8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("*")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token type class-name"}},[e._v("i8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token type class-name"}},[e._v("i8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("*")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("*")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("%8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token type class-name"}},[e._v("i32")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token type class-name"}},[e._v("i32")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("%10")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("load")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token type class-name"}},[e._v("i8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token type class-name"}},[e._v("i8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("*")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("%9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("align")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("8")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("%11")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("bitcast")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token type class-name"}},[e._v("i8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("*")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("%10")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("to")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token type class-name"}},[e._v("void")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token type class-name"}},[e._v("i8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("*")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("; indirect call :(")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("tail")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("call")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("fastcc")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token type class-name"}},[e._v("void")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("%11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token type class-name"}},[e._v("i8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("*")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("nonnull")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("%retval.sroa.0.0.copyload.i71")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("#2")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ret")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token type class-name"}},[e._v("void")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n")])])]),a("p",[e._v("We are getting direct call to "),a("code",[e._v("ChainedCoroCall<4>(int*).resume")]),e._v("!\nIf we can somehow get some attributes passed into the optimization pass or even tweak the optimizer,\nwe can definitely inline this.\nI will leave the actual inling and performance comparison for the next post.")]),e._v(" "),a("h4",{attrs:{id:"_2-remove-initial-suspend"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-remove-initial-suspend"}},[e._v("#")]),e._v(" 2) Remove "),a("code",[e._v("initial_suspend")])]),e._v(" "),a("p",[a("code",[e._v("initial_suspend")]),e._v(" exists in the double linked list tracking of coroutine frames to\nlet the leaf coroutine frame set itself to the root coroutine frame so that\nwhen resuming leaf coroutine can be jumped to with O(1) cost.")]),e._v(" "),a("p",[e._v("Without "),a("code",[e._v("initial_suspend")]),e._v(', the callee can spawn another coroutine frame before establish the\n"parent" relation with its caller through '),a("code",[e._v("co_await")]),e._v(".\nThat may cause the chain of coroutine frame breaking in the middle when the leaf coroutine frame suspends.")]),e._v(" "),a("p",[e._v("To compensate, either")]),e._v(" "),a("ol",[a("li",[e._v("do a full linked list traversal in resuming a chain of coroutine to find the leaf,\nwhich takes O(Num_Of_Level) and obviously does not scale. (Inlining reduces Num_Of_Level to 1? so O(1)?")]),e._v(" "),a("li",[e._v("or traverse part of the linked list in "),a("code",[e._v("co_await")]),e._v(" to update the leaf,\nwhich I don't see the amortized cost but can not be ignored.")]),e._v(" "),a("li",[e._v("Get rid of the linked list entirely.\nUse a "),a("code",[e._v("static thread_local")]),e._v(" FIFO to maintain the coroutine frames' dependencies instead.\nWe have tested this approach before Corobase and it does not perform well.")])]),e._v(" "),a("p",[e._v("Still, I removed "),a("code",[e._v("initial_suspend")]),e._v(" and made changes to the linked list accordingly,\nthe generated IR in "),a("code",[e._v("-O3")]),e._v(" for the same sample:")]),e._v(" "),a("div",{staticClass:"language-LLVM extra-class"},[a("pre",{pre:!0,attrs:{class:"language-llvm"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("; demangled to task<void> ChainedCoroCall<5>(int*)")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("define")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("linkonce_odr")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token type class-name"}},[e._v("void")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("@_Z15ChainedCoroCallILi5EE4taskIvEPi")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("%class.task")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("*")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("noalias")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("sret")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("align")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("8")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("%agg.result")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token type class-name"}},[e._v("i32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("*")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("%callLevelCounter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("#0")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("call")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token type class-name"}},[e._v("void")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("@llvm.lifetime.start.p0i8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token type class-name"}},[e._v("i64")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token type class-name"}},[e._v("i8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("*")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("nonnull")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("%ref.tmp11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("#2")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("; demangled to task<void> ChainedCoroCall<4>(int*)")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("; direct call :)")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("call")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token type class-name"}},[e._v("void")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("@_Z15ChainedCoroCallILi4EE4taskIvEPi")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("%class.task")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("*")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("nonnull")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("sret")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("align")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("8")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("%1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token type class-name"}},[e._v("i32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("*")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("nonnull")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("%callLevelCounter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ret")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token type class-name"}},[e._v("void")]),e._v("\n")])])]),a("p",[e._v("Note "),a("code",[e._v("ChainedCoroCall<>.resume()")]),e._v(" in the previous trial becomes "),a("code",[e._v("ChainedCoroCall<>()")]),e._v(".\nBecause removing "),a("code",[e._v("initial_suspend")]),e._v(" causing the actual logic goes to different places in splitting.\nBut anyway, we get a not inlined direct call again！")]),e._v(" "),a("p",[e._v("Same as above, the performance evaluation will go to another post.")]),e._v(" "),a("h4",{attrs:{id:"_3-write-custom-pass-to-inline-coroutine-before-splitting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-write-custom-pass-to-inline-coroutine-before-splitting"}},[e._v("#")]),e._v(" 3) Write custom pass to inline coroutine before splitting")]),e._v(" "),a("p",[e._v("Changing the implementation for awaitable is not the only possible way to inline.\nLLVM's optimization pass manager has open interfaces allowing it to create custom passes.")]),e._v(" "),a("p",[e._v('Because of the default coroutine optimization pass does splitting,\na good shot to do inlining in a custom pass is to inline before splitting\nwhich basically automates the "inline by hand" in Corobase.')]),e._v(" "),a("p",[e._v('But it leads to the problem that the custom pass would be doing inling in places (outside CGSCC)\nthat should not do intra function optimization.\nYou never know what would happen if doing so, therefore I consider this to be "the wrong way".')]),e._v(" "),a("h4",{attrs:{id:"_4-replace-coroutine-optimization-pass-entirely"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-replace-coroutine-optimization-pass-entirely"}},[e._v("#")]),e._v(" 4) Replace coroutine optimization pass entirely")]),e._v(" "),a("p",[e._v("Does coroutine really need splitting? I guess not necessarily.\nWithout splitting, coroutine is just a function with some builtin templates that handles\na dynamic memory region and a virtual interface.")]),e._v(" "),a("p",[e._v("I haven't figured out the reason behind the splitting optimization.\nBut it might be something serving the common usage for stackless coroutine\n(Corobase is minority),\nsuch as a multi-threaded event loop to hide IO latency.")]),e._v(" "),a("p",[e._v("A fully rewrite of coroutine optimization passes would cost a lot effort\nand very likely never possible to be merged into upstream.\nI would not take this path when others are workable.")]),e._v(" "),a("h4",{attrs:{id:"_5-rust-s-design"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-rust-s-design"}},[e._v("#")]),e._v(" 5) Rust's design")]),e._v(" "),a("p",[e._v("I was told by a friend who did a lot work in Rust\nthat Rust async, which also uses LLVM stackless coroutine as backend,\nexposes a global state machine.")]),e._v(" "),a("p",[e._v('Users get fast context switches without thinking "the chain of coroutine frames".\nSame, will look into the design of Rust coroutine in the next post.')]),e._v(" "),a("h1",{attrs:{id:"reference"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[e._v("#")]),e._v(" Reference")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://llvm.org/devmtg/2016-11/Slides/Nishanov-LLVMCoroutines.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://llvm.org/devmtg/2016-11/Slides/Nishanov-LLVMCoroutines.pdf"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://reviews.llvm.org/D23234",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://reviews.llvm.org/D23234"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://lists.llvm.org/pipermail/llvm-dev/2016-July/102337.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://lists.llvm.org/pipermail/llvm-dev/2016-July/102337.html"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://youtu.be/8C8NnE1Dg4A?t=841",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://youtu.be/8C8NnE1Dg4A?t=841"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://llvm.org/docs/Coroutines.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://llvm.org/docs/Coroutines.html"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"http://www.cs.cornell.edu/~asampson/blog/clangpass.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://www.cs.cornell.edu/~asampson/blog/clangpass.html"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=n.exports}}]);