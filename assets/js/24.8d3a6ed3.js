(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{461:function(e,t,r){"use strict";r.r(t);var o=r(43),a=Object(o.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("p",[e._v("Blogs and news read during Oct. 2020 to Jan. 2021 that I found interesting. Summaries updated in Feb. 2021.\n")]),e._v(" "),r("p",[e._v("Disclaimer: Opinions on my own and please judge the credibility by yourself.")]),e._v(" "),r("p"),r("div",{staticClass:"table-of-contents"},[r("ul",[r("li",[r("a",{attrs:{href:"#android-kernel-notes-from-lpc-2020"}},[e._v("Android Kernel Notes From LPC 2020")])]),r("li",[r("a",{attrs:{href:"#accurate-timestamps-for-the-ftrace-ring-buffer"}},[e._v("Accurate Timestamps for the ftrace Ring Buffer")])]),r("li",[r("a",{attrs:{href:"#resource-management-in-kde"}},[e._v("Resource Management in KDE")])]),r("li",[r("a",{attrs:{href:"#the-arm64-memory-tagging-extension-in-linux"}},[e._v("The Arm64 Memory Tagging Extension in Linux")])]),r("li",[r("a",{attrs:{href:"#kernel-support-for-processor-undervolting"}},[e._v("Kernel Support for Processor Undervolting")])]),r("li",[r("a",{attrs:{href:"#kvm-for-android"}},[e._v("KVM for Android")])]),r("li",[r("a",{attrs:{href:"#epoll-pwait2-close-range-and-encoded-i-o"}},[e._v("epollpwait2(), closerange(), and encoded I/O")])]),r("li",[r("a",{attrs:{href:"#why-printk-is-so-complicated-and-how-to-fix-it"}},[e._v("Why printk() is so Complicated (and How to Fix It)")])]),r("li",[r("a",{attrs:{href:"#_5-10-merge-window-part-1"}},[e._v("5.10 Merge Window, Part 1")])]),r("li",[r("a",{attrs:{href:"#bootstrappable-builds"}},[e._v("Bootstrappable Builds")])]),r("li",[r("a",{attrs:{href:"#swvkc-is-a-vulkan-powered-wayland-compositor-focused-on-performance-correctness"}},[e._v("SWVKC Is A Vulkan-Powered Wayland Compositor Focused On Performance + Correctness")])]),r("li",[r("a",{attrs:{href:"#developing-wayland-color-management-and-high-dynamic-range"}},[e._v("Developing Wayland Color Management and High Dynamic Range")])]),r("li",[r("a",{attrs:{href:"#from-panfrost-to-production-a-tale-of-open-source-graphics"}},[e._v("From Panfrost to production, a tale of Open Source graphics")])]),r("li",[r("a",{attrs:{href:"#reverse-engineering-the-apple-m1-gpu"}},[e._v("Reverse-Engineering The Apple M1 GPU")])]),r("li",[r("a",{attrs:{href:"#gpu-motunui-render-disney-animation-s-moana-island-dataset"}},[e._v("GPU-Motunui (Render Disney Animation’s Moana island dataset)")])]),r("li",[r("a",{attrs:{href:"#rv64x-a-free-open-source-gpu-for-risc-v"}},[e._v("RV64X: A Free, Open Source GPU for RISC-V")])]),r("li",[r("a",{attrs:{href:"#attacking-the-qualcomm-adreno-gpu"}},[e._v("Attacking the Qualcomm Adreno GPU")])]),r("li",[r("a",{attrs:{href:"#let-s-build-a-high-performance-fuzzer-with-gpus"}},[e._v("Let’s Build a High-performance Fuzzer with GPUs!")])]),r("li",[r("a",{attrs:{href:"#using-tla-in-the-real-world-to-understand-a-glibc-bug"}},[e._v("Using TLA+ in the Real World to Understand a Glibc Bug")])]),r("li",[r("a",{attrs:{href:"#productionizing-rendering-algorithms"}},[e._v("Productionizing Rendering Algorithms")])]),r("li",[r("a",{attrs:{href:"#tsmc-confirms-3nm-tech-for-2022"}},[e._v("TSMC Confirms 3nm Tech for 2022")])])])]),r("p"),e._v(" "),r("h3",{attrs:{id:"android-kernel-notes-from-lpc-2020"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#android-kernel-notes-from-lpc-2020"}},[e._v("#")]),e._v(" Android Kernel Notes From LPC 2020")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://lwn.net/Articles/830979/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://lwn.net/Articles/830979/"),r("OutboundLink")],1),e._v(" - September 10, 2020")]),e._v(" "),r("blockquote",[r("p",[e._v("In its early days, the Android project experienced a high-profile disconnect with the kernel community. That situation has since improved considerably, but there are still differences between Android kernels and the mainline. As a result, it is not possible to run Android on a vanilla kernel.")])]),e._v(" "),r("blockquote",[r("p",[e._v('... Vendors pick up this kernel and apply their own changes — often significant, core-kernel changes — to create a vendor kernel ... The end result of all this patching is that every device has its own kernel, meaning that there are thousands of different "Android" kernels in use.')])]),e._v(" "),r("blockquote",[r("p",[e._v("Fragmentation makes it harder to ensure that all devices are running current kernels — or even that they get security updates ... Fixes applied by vendors and OEMs often do not make it back into the mainline, making things worse for everybody.")])]),e._v(" "),r("blockquote",[r("p",[e._v("... The Android developers would like to fix this fragmentation problem ... goal involves providing a single generic kernel in binary form ( Android Generic Kernel Image, a.k.a GKI)")])]),e._v(" "),r("blockquote",[r("p",[e._v("Any vendor-specific or device-specific code that is not in the mainline kernel will need to be shipped in the form of kernel modules to be loaded into the GKI ... Android 11 release requires all devices to ship with kernels based on the Android Common Kernel; Android 12 will require shipping with the GKI instead.")])]),e._v(" "),r("blockquote",[r("p",[e._v("what it takes to boot Android on a mainline kernel ... in the generic case, there is only one patch needed at this point: anonymous VMA naming.")])]),e._v(" "),r("p",[e._v("Android is moving to Android Generic Kernel Image to solve the kernel fragmentation problem.")]),e._v(" "),r("h3",{attrs:{id:"accurate-timestamps-for-the-ftrace-ring-buffer"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#accurate-timestamps-for-the-ftrace-ring-buffer"}},[e._v("#")]),e._v(" Accurate Timestamps for the ftrace Ring Buffer")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://lwn.net/Articles/831207/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://lwn.net/Articles/831207/"),r("OutboundLink")],1),e._v(" - September 22, 2020")]),e._v(" "),r("blockquote",[r("p",[e._v("ftrace uses a ring buffer to quickly communicate events to user space ... Until recently, the design of the ring buffer has led to the creation of inaccurate timestamps when events are generated from interrupt handlers.")])]),e._v(" "),r("blockquote",[r("p",[e._v("The ftrace ring buffer was added in 2008 and, a little less than a year later, it became completely lockless.")])]),e._v(" "),r("blockquote",[r("p",[e._v("Writes to a specific per-CPU buffer can only happen on the CPU for that buffer. That ensures that any contention between writers will always be in stack order ... The design of the ring buffer depends on the fact that writers that interrupt other writers will completely finish before the interrupted writer may continue ...")])]),e._v(" "),r("p",[e._v("The article talks about a fixing in ftrace's timestamp in handling nested interrupts. The bug being fixed is rare to be triggered. But the article is a good explanation about the design of ftrace, how it achieves both time and memory efficient and what kind of nasty bug can happen in lock free programming.")]),e._v(" "),r("h3",{attrs:{id:"resource-management-in-kde"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#resource-management-in-kde"}},[e._v("#")]),e._v(" Resource Management in KDE")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://lwn.net/Articles/834329/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://lwn.net/Articles/834329/"),r("OutboundLink")],1),e._v(" - October 19, 2020")]),e._v(" "),r("blockquote",[r("p",[e._v("Applications that run on the Linux desktop have changed significantly under the hood in recent years; for example, they use more processes than before.")])]),e._v(" "),r("blockquote",[r("p",[e._v('Some time ago, when a user was running a web browser like Firefox ... the management of running processes was easy. The user could run a ps command and would see just one line of output for each of those applications ... Now, the situation is "very different". When a user opens a Firefox instance they can get a dozen processes.')])]),e._v(" "),r("blockquote",[r("p",[e._v("Fairness is also an increasingly important issue.")])]),e._v(" "),r("blockquote",[r("p",[e._v('... an example of Krita, an advanced graphics application ... all contained within a single process. On the other hand, Discord has those 13 processes, many of which will be making heavy use of the CPU "because it is written in Electron". The system\'s CPU scheduler will see those two applications as 14 opaque processes, not knowing what they correspond to.')])]),e._v(" "),r("blockquote",[r("p",[e._v("The solution exists in the form of control groups (or cgroups), ... Application processes are started, then they are tagged as belonging to a cgroup ... assigning weights ... to control the CPU time they use.")])]),e._v(" "),r("p",[e._v("KDE (and cooperated with GNOME) are making changes to improve the resource management (CPU time, memory, etc.)\nfor desktop applications.\nRight now, resources are managed to individual processes.\nHowever, applications may spawn different number of processes,\nleading to unfairness for high priority but fewer processed applications."),r("br"),e._v("\nThis is getting to be resolved by using cgroup to manage the resources.")]),e._v(" "),r("h3",{attrs:{id:"the-arm64-memory-tagging-extension-in-linux"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#the-arm64-memory-tagging-extension-in-linux"}},[e._v("#")]),e._v(" The Arm64 Memory Tagging Extension in Linux")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://lwn.net/Articles/834289/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://lwn.net/Articles/834289/"),r("OutboundLink")],1),e._v(" - October 15, 2020")]),e._v(" "),r("blockquote",[r("p",[e._v("the Arm64 architecture uses 64-bit pointers to address memory. There is no need (yet!) for an address space that large, though, so normally only 48 of those bits are actually used by the hardware — or 52 bits if a special large-address-space option is enabled ... there are 12-16 bits that can be used for other purposes ... The memory tagging extension (MTE) is one of those uses.")])]),e._v(" "),r("blockquote",[r("p",[e._v('MTE allows the storage of a four-bit "key" in bits 59-56 of a virtual address ... Four bits only allow for 16 distinct key values ... If a function like malloc() ensures that allocations that are adjacent in memory have different key values ... Use-after-free bugs can be detected by changing the key value immediately when a range of memory is freed.')])]),e._v(" "),r("blockquote",[r("p",[e._v("MTE thus has two levels of applicability ... If enabled during the normal software-development process, it should help to identify a range of bugs ... it can also be enabled on production systems to add one more obstacle that an attacker must overcome to exploit a known vulnerability.")])]),e._v(" "),r("blockquote",[r("p",[e._v("MTE is disabled by default on Linux systems, even on hardware that supports it. A user-space process can enable MTE for a specific region of memory ... None of this is helpful to anybody now, though, since hardware with MTE support is not actually shipping yet. The good news is that, once that hardware is available, the software side should be ready for it immediately.")])]),e._v(" "),r("p",[e._v("On Arm64, not every 64 bits of a pointer is being used by OS and hardware.\nThe memory tagging extension uses 4 bits of the unused bits to add a key to a pointer.\nIt can be used to")]),e._v(" "),r("ol",[r("li",[e._v("detect incorrect memory free in development and")]),e._v(" "),r("li",[e._v("detect illegal memory dereference issued by attackers.\nThough devices supporting MTE haven't been manufactured, the Linux driver for MTE is ready.")])]),e._v(" "),r("h3",{attrs:{id:"kernel-support-for-processor-undervolting"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#kernel-support-for-processor-undervolting"}},[e._v("#")]),e._v(" Kernel Support for Processor Undervolting")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://lwn.net/Articles/835594/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://lwn.net/Articles/835594/"),r("OutboundLink")],1),e._v(" - November 2, 2020")]),e._v(" "),r("blockquote",[r("p",[e._v("Current processors can run with any of a number of combinations of frequency and voltage, which can change dynamically in a process called dynamic frequency scaling ... It is possible to place a CPU into a configuration outside of its specified operational envelope ... the processor may malfunction in a number of ways, from occasional false results from some instructions to a complete crash.")])]),e._v(" "),r("blockquote",[r("p",[e._v("In the case of Intel chips, the voltage settings are controlled by Model Specific Registers (MSRs) ... On Linux, access to the MSRs from user space is possible using /dev/cpu/CPUID/msr special files ... maintainer of Intel power-related drivers responded ... a proper sysfs interface ... would have to perform checks of the passed values to prevent users from crashing their systems.")])]),e._v(" "),r("p",[e._v("Undervolting CPU is useful for saving power and reducing heat.\nThere is no standard way to do undervolting on Linux.\nDoing undervolting has the risk of malfunctioning the CPU and it can also be exploited by malicious attackers.\nDiscussions are going on about possible future work on undervolting.")]),e._v(" "),r("h3",{attrs:{id:"kvm-for-android"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#kvm-for-android"}},[e._v("#")]),e._v(" KVM for Android")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://lwn.net/Articles/836693/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://lwn.net/Articles/836693/"),r("OutboundLink")],1),e._v(" - November 11, 2020")]),e._v(" "),r("blockquote",[r("p",[e._v('The hypervisor situation on Android is chaotic ... At least all of the Android devices are running some version of Linux, but in terms of hypervisors, "it\'s the wild west of fragmentation" ... hypervisors are used in Android today is ... running code outside of Android itself.')])]),e._v(" "),r("blockquote",[r("p",[e._v("Security is hampered because there is an increased trusted computing base (TCB) and it is more difficult to update the devices because of the fragmentation at that level. And functionality is lacking because there is no access to the hardware virtualization features from within Android.")])]),e._v(" "),r("blockquote",[r("p",[e._v("the Android project would like to have a way to de-privilege this third-party code. There is a need for a portable environment that can host these services in a way that is isolated from the Android system.")])]),e._v(" "),r("blockquote",[r("p",[e._v("One way to do that is to move the trusted code into a VM at the same level as the Android system. The idea is to use the GKI effort to introduce KVM as that hypervisor in order to move that third-party code out of the over-privileged trusted region.")])]),e._v(" "),r("p",[e._v("The protected KVM project is closely related to Android GKI. Android suffers from Kernel fragmentation issues, but third-party code for digital rights management (DRM), various opaque binary blobs, cryptographic code, etc are even worse fragmented.\nThe protected KVM project is trying to create a virtual environment in AOSP for those third-party code.")]),e._v(" "),r("h3",{attrs:{id:"epoll-pwait2-close-range-and-encoded-i-o"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#epoll-pwait2-close-range-and-encoded-i-o"}},[e._v("#")]),e._v(" epoll_pwait2(), close_range(), and encoded I/O")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://lwn.net/Articles/837816/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://lwn.net/Articles/837816/"),r("OutboundLink")],1),e._v(" - November 20, 2020")]),e._v(" "),r("blockquote",[r("p",[e._v('The kernel\'s "epoll" subsystem provides a high-performance mechanism for a process to wait on events from a large number of open file descriptors. ... waiting on events with epoll_wait() or epoll_pwait(). When waiting, the caller can specify a timeout as an integer number of milliseconds.')])]),e._v(" "),r("blockquote",[r("p",[e._v("Nearly 20 years ago, when this work was being done, a millisecond timeout seemed like enough resolution ... In 2020, though, one millisecond can be an eternity;")])]),e._v(" "),r("blockquote",[r("p",[e._v('the patch set instead added a new flag (EPOLL_NSTIMEO) to epoll_create() ... If an epoll file descriptor was created with that flag set, then the timeout value for epoll_wait() would be interpreted as being in nanoseconds rather than milliseconds ... Having one system call set a flag to change how arguments to a different system call would be interpreted was "not very nice"  ... After a bit of back and forth, that is what happened ... the patch set adds epoll_pwait2():')])]),e._v(" "),r("p",[e._v("New syscall "),r("code",[e._v("epoll_pwait2()")]),e._v(" to support nanoseconds event waits.")]),e._v(" "),r("blockquote",[r("p",[e._v("The close_range() system call was added in the 5.9 release as a way to efficiently close a whole list of file descriptors:")])]),e._v(" "),r("p",[e._v("New syscall "),r("code",[e._v("close_range()")]),e._v(" to close a range of fds.")]),e._v(" "),r("blockquote",[r("p",[e._v('Some filesystems have the ability to compress and/or encrypt data written to files ...  somebody wanted the ability to work with this "encoded" data directly, bypassing the processing steps within the filesystem code ... With this patch set applied, it becomes possible to read the compressed and/or encrypted data directly and write it directly, with no intervening processing.')])]),e._v(" "),r("p",[e._v("New syscalls "),r("code",[e._v("preadv()")]),e._v(" and "),r("code",[e._v("pwritev()")]),e._v(" to support directly read and write encoded data.")]),e._v(" "),r("h3",{attrs:{id:"why-printk-is-so-complicated-and-how-to-fix-it"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#why-printk-is-so-complicated-and-how-to-fix-it"}},[e._v("#")]),e._v(" Why printk() is so Complicated (and How to Fix It)")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://lwn.net/Articles/800946/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://lwn.net/Articles/800946/"),r("OutboundLink")],1),e._v(" - October 3, 2019")]),e._v(" "),r("blockquote",[r("p",[e._v('The difficulties with printk() over the years ... come down to the tension between non-interference and reliability. Non-interference can be addressed by making printk() fully preemptible, making the ring buffer safe in all contexts, and moving console handling to dedicated kernel threads. Reliability, instead, can be achieved by providing a synchronous channel for important messages, an "atomic consoles" concept, and the notion of "emergency messages".')])]),e._v(" "),r("blockquote",[r("p",[e._v("the printk() work starts with the creation of a new ring buffer meant to address the problems ... It is fully lockless, supporting multiple readers and writers in all contexts")])]),e._v(" "),r("blockquote",[r("p",[e._v('add an "atomic console" concept ... would have a write_atomic() method ... This method is defined to operate synchronously ...')])]),e._v(" "),r("blockquote",[r("p",[e._v('Associated with atomic consoles is the idea of "emergency messages" that must go out right away...')])]),e._v(" "),r("p",[e._v("Good readings to know about the complexity (surprisingly) behind "),r("code",[e._v("printk()")]),e._v(" and some recent progress.")]),e._v(" "),r("h3",{attrs:{id:"_5-10-merge-window-part-1"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-10-merge-window-part-1"}},[e._v("#")]),e._v(" 5.10 Merge Window, Part 1")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://lwn.net/Articles/834157/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://lwn.net/Articles/834157/"),r("OutboundLink")],1),e._v(" - October 16, 2020")]),e._v(" "),r("blockquote",[r("p",[e._v("The Arm v8.5 memory tagging extension is now supported...")])]),e._v(" "),r("blockquote",[r("p",[e._v("The seqcount latch specialized lock type has been added.")])]),e._v(" "),r("blockquote",[r("p",[e._v("Static calls are a mechanism for performing indirect function calls with better performance, especially on systems where retpolines would otherwise have to be used to protect against Spectre vulnerabilities. This mechanism has been under development since 2018; it was finally merged for 5.10.")])]),e._v(" "),r("blockquote",[r("p",[e._v("The printk() subsystem has gained a new lockless ring buffer meant to be a first step in resolving a number of problems in this area.")])]),e._v(" "),r("blockquote",[r("p",[e._v("The minimum version of Clang needed to build the kernel is now 10.0.1.")])]),e._v(" "),r("p",[e._v("Several aforementioned patches landed in 5.10.\nAlso exciting to see "),r("a",{attrs:{href:"https://support.google.com/faqs/answer/7625886",target:"_blank",rel:"noopener noreferrer"}},[e._v("retpolines"),r("OutboundLink")],1),e._v(' landed in kernel. Compensating some performance loss from "Spectre".')]),e._v(" "),r("h3",{attrs:{id:"bootstrappable-builds"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#bootstrappable-builds"}},[e._v("#")]),e._v(" Bootstrappable Builds")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://lwn.net/Articles/841797/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://lwn.net/Articles/841797/"),r("OutboundLink")],1),e._v(" - January 6, 2021")]),e._v(" "),r("blockquote",[r("p",[e._v("The idea of Reproducible Builds—being able to recreate bit-for-bit identical binaries using the same source code—has gained momentum over the last few years. Reproducible builds provide some safeguards against bad actors in the software supply chain. Minimizing the reliance on opaque binaries for building our software ecosystem is the goal of the Bootstrappable Builds project.")])]),e._v(" "),r("blockquote",[r("p",[e._v("having a way to bootstrap a C compiler, such as GCC, is among the projects that Bootstrappable Builds is pursuing ... One such effort is maintaining a subset of GCC version 4.7, which is the last version that can be built with only a C compiler")])]),e._v(" "),r("blockquote",[r("p",[e._v("A related effort revolves around GNU Mes, which is the combination of a Scheme interpreter written in C and a C compiler written in Scheme. The two parts are mutually self-hosting, so one can be built from the other...")])]),e._v(" "),r("p",[e._v("Bootstrap builds means building from source without using any binary tool or libraries.\nIt aims to be a defending against supply chain attacks.\nI guess it is based on the assumption that a backdoor in a source file is easy to find while a backdoor in a binary file is hard to be detected.")]),e._v(" "),r("p",[e._v("Considering the scale of the recently unveiled supply chain attach to SolarWind,\nI believe bootstrap builds may get more and more attention.")]),e._v(" "),r("p",[e._v("Existing efforts for bootstrap builds includes maintaining a version of GCC that can compile itself.\nBeside, there is a brilliant idea to use a Schema written in C and C compiler written in Schema to start with,\nso they can build from source with the help of an external C or Schema compiler.")]),e._v(" "),r("p",[e._v('Actually I feel it is still possible for the external compiler to inject malicious code to the compiled C or Schema compiler. But with more rounds of C to Schema and Schema to C compiling, it might be practically impossible for the external compiler to influence the final, kind of "converged", compilers.\nNot sure whether this reasoning is correct.')]),e._v(" "),r("h3",{attrs:{id:"swvkc-is-a-vulkan-powered-wayland-compositor-focused-on-performance-correctness"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#swvkc-is-a-vulkan-powered-wayland-compositor-focused-on-performance-correctness"}},[e._v("#")]),e._v(" SWVKC Is A Vulkan-Powered Wayland Compositor Focused On Performance + Correctness")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://www.phoronix.com/scan.php?page=news_item&px=SWVKC-Wayland-Vulkan-Comp",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.phoronix.com/scan.php?page=news_item&px=SWVKC-Wayland-Vulkan-Comp"),r("OutboundLink")],1),e._v(" - July 26, 2020")]),e._v(" "),r("blockquote",[r("p",[e._v("One of the leading (among few) examples of a Vulkan-powered window manager / compositor is ChamferWM, which does continue to be developed.")])]),e._v(" "),r("blockquote",[r("p",[e._v("SWVKC meanwhile is one that has been seeing development this year as an alpha-stage Wayland Vulkan compositor.")])]),e._v(" "),r("p",[e._v("A quick look on SWVKC's "),r("a",{attrs:{href:"https://github.com/st3r4g/swvkc",target:"_blank",rel:"noopener noreferrer"}},[e._v("github page"),r("OutboundLink")],1),e._v(".\nIt is still use gbm to buffer management, that makes it not so interesting.\nIMO it is absolutely possible for the compositor to talk to DRM to get rid of gbm.\nThe "),r("a",{attrs:{href:"https://www.phoronix.com/scan.php?page=news_item&px=ChamferWM-Vulkan-Compositor",target:"_blank",rel:"noopener noreferrer"}},[e._v("ChamferWM"),r("OutboundLink")],1),e._v(" linked in the post seems to be a purer Vulkan compositor.")]),e._v(" "),r("h3",{attrs:{id:"developing-wayland-color-management-and-high-dynamic-range"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#developing-wayland-color-management-and-high-dynamic-range"}},[e._v("#")]),e._v(" Developing Wayland Color Management and High Dynamic Range")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://www.collabora.com/news-and-blog/blog/2020/11/19/developing-wayland-color-management-and-high-dynamic-range/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.collabora.com/developing-wayland-color-management"),r("OutboundLink")],1),e._v(" - November 19, 2020")]),e._v(" "),r("h3",{attrs:{id:"from-panfrost-to-production-a-tale-of-open-source-graphics"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#from-panfrost-to-production-a-tale-of-open-source-graphics"}},[e._v("#")]),e._v(" From Panfrost to production, a tale of Open Source graphics")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://www.collabora.com/news-and-blog/blog/2020/11/03/from-panfrost-to-production-a-tale-of-open-source-graphics/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.collabora.com/from-panfrost-to-production-a-tale"),r("OutboundLink")],1),e._v(" - November 03, 2020")]),e._v(" "),r("h3",{attrs:{id:"reverse-engineering-the-apple-m1-gpu"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#reverse-engineering-the-apple-m1-gpu"}},[e._v("#")]),e._v(" Reverse-Engineering The Apple M1 GPU")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://www.phoronix.com/scan.php?page=news_item&px=Apple-M1-GPU-RE",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.phoronix.com/scan.php?page=news_item&px=Apple-M1-GPU-RE"),r("OutboundLink")],1),e._v(" - January 7, 2021")]),e._v(" "),r("h3",{attrs:{id:"gpu-motunui-render-disney-animation-s-moana-island-dataset"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#gpu-motunui-render-disney-animation-s-moana-island-dataset"}},[e._v("#")]),e._v(" GPU-Motunui (Render Disney Animation’s Moana island dataset)")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://www.render-blog.com/2020/10/03/gpu-motunui/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.render-blog.com/2020/10/03/gpu-motunui/"),r("OutboundLink")],1)]),e._v(" "),r("h3",{attrs:{id:"rv64x-a-free-open-source-gpu-for-risc-v"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rv64x-a-free-open-source-gpu-for-risc-v"}},[e._v("#")]),e._v(" RV64X: A Free, Open Source GPU for RISC-V")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://www.eetimes.com/rv64x-a-free-open-source-gpu-for-risc-v/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.eetimes.com/rv64x-a-free-open-source-gpu-for-risc-v/"),r("OutboundLink")],1),e._v(" - January 27, 2021\nSomehow reminds me of "),r("a",{attrs:{href:"https://www.techspot.com/article/2125-intel-last-graphics-card/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Intel's failed x86 GPU project"),r("OutboundLink")],1),e._v(".")]),e._v(" "),r("h3",{attrs:{id:"attacking-the-qualcomm-adreno-gpu"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#attacking-the-qualcomm-adreno-gpu"}},[e._v("#")]),e._v(" Attacking the Qualcomm Adreno GPU")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://googleprojectzero.blogspot.com/2020/09/attacking-qualcomm-adreno-gpu.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://googleprojectzero.blogspot.com/attacking-qualcomm-adreno-gpu"),r("OutboundLink")],1),e._v(" - September 8, 2020")]),e._v(" "),r("h3",{attrs:{id:"let-s-build-a-high-performance-fuzzer-with-gpus"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#let-s-build-a-high-performance-fuzzer-with-gpus"}},[e._v("#")]),e._v(" Let’s Build a High-performance Fuzzer with GPUs!")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://blog.trailofbits.com/2020/10/22/lets-build-a-high-performance-fuzzer-with-gpus/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://blog.trailofbits.com/lets-build-a-high-performance-fuzzer-with-gpus"),r("OutboundLink")],1),e._v(" - October 22, 2020")]),e._v(" "),r("h3",{attrs:{id:"using-tla-in-the-real-world-to-understand-a-glibc-bug"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#using-tla-in-the-real-world-to-understand-a-glibc-bug"}},[e._v("#")]),e._v(" Using TLA+ in the Real World to Understand a Glibc Bug")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://probablydance.com/2020/10/31/using-tla-in-the-real-world-to-understand-a-glibc-bug/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://probablydance.com/using-tla-in-the-real-world"),r("OutboundLink")],1),e._v(" - October 31, 2020")]),e._v(" "),r("h3",{attrs:{id:"productionizing-rendering-algorithms"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#productionizing-rendering-algorithms"}},[e._v("#")]),e._v(" Productionizing Rendering Algorithms")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://bartwronski.com/2020/12/27/why-are-video-games-graphics-still-a-challenge-productionizing-rendering-algorithms/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://bartwronski.com/why-are-video-games-graphics-still-a-challenge"),r("OutboundLink")],1),e._v(" - December 27, 2020")]),e._v(" "),r("h3",{attrs:{id:"tsmc-confirms-3nm-tech-for-2022"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tsmc-confirms-3nm-tech-for-2022"}},[e._v("#")]),e._v(" TSMC Confirms 3nm Tech for 2022")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://www.pcgamer.com/tsmc-confirms-3nm-tech-for-2022-could-enable-epic-80-billion-transistor-gpus/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.pcgamer.com/tsmc-confirms-3nm-tech-for-2022"),r("OutboundLink")],1),e._v(" - November 26, 2020")])])}),[],!1,null,null,null);t.default=a.exports}}]);