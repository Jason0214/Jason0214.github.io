(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{458:function(e,t,a){"use strict";a.r(t);var s=a(43),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Wireguard is a VPN protocol, which has an implementation presents in the Linux kernel.\nThis post records my first time experience setting up a Wireguard VPN for my heterogeneous devices (Macbook, iphone, etc.)\n")]),e._v(" "),a("h3",{attrs:{id:"motivation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),a("p",[e._v("There are a lot of things of Wireguard that I would consider very interesting.\nSuch as")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.wireguard.com/formal-verification/",target:"_blank",rel:"noopener noreferrer"}},[e._v("formal verification"),a("OutboundLink")],1),e._v(" that the protocol that has gone through,")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://git.zx2c4.com/wireguard-linux",target:"_blank",rel:"noopener noreferrer"}},[e._v("implementation"),a("OutboundLink")],1),e._v(" inside Linux kernel,")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/WireGuard",target:"_blank",rel:"noopener noreferrer"}},[e._v("clients"),a("OutboundLink")],1),e._v(" are available for different platforms with community efforts,\netc.")])]),e._v(" "),a("p",[e._v("These facts give me a good confidence on its security and performance.\nAnd here goes this post, a written down of my first time experience to set up a working Wireguard VPN service.")]),e._v(" "),a("h3",{attrs:{id:"the-server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-server"}},[e._v("#")]),e._v(" The server")]),e._v(" "),a("p",[e._v('I used a VM instance from one of those big cloud service providers to build my Wireguard server.\nI call it a server because I have some presets in my mind about how I would use the Wireguard guard for,\nI would like to re-route all the network traffic of some of my mobile devices to a remote server.\nThus, the remote server works more like a "server".')]),e._v(" "),a("p",[e._v("However, the Wireguard protocol and its configuration are more Peer-to-Peer-ish.\nIt can be more flexible than the server-client model I am going to describe below.")]),e._v(" "),a("p",[e._v('I used a Ubuntu 20.04 LTS for my server.\nWireguard implementation is presented in Linux kernel starting from 5.6.\nIf you are using a kernel older than 5.6, you need to install the manually install Wireguard kernel driver through "apt install wireguard-dkms", otherwise you are good.\nIn both case, you will need some userspace utilities through "apt install wireguard".')]),e._v(" "),a("h4",{attrs:{id:"key-pairs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#key-pairs"}},[e._v("#")]),e._v(" Key pairs")]),e._v(" "),a("p",[e._v("Wireguard peers authenticates use public and private key.\nEvery Wireguard peer (either server or client in my case) generates a public and private key pair.\nThe public key will be given to other peers for authentication and access control.\n"),a("a",{attrs:{href:"https://www.digitalocean.com/community/tutorials/how-to-set-up-wireguard-on-ubuntu-20-04#step-1-installing-wireguard-and-generating-a-key-pair",target:"_blank",rel:"noopener noreferrer"}},[e._v("This DigitalOcean guide"),a("OutboundLink")],1),e._v("\ngives a good instruction on to generate key pairs.")]),e._v(" "),a("h4",{attrs:{id:"choose-ip-ranges"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#choose-ip-ranges"}},[e._v("#")]),e._v(" Choose IP ranges")]),e._v(" "),a("p",[e._v("The above DO Wireguard guide also has a well written section on how to choose both IPv4 and IPv6 for VPNs.")]),e._v(" "),a("p",[e._v("In my case, I choose the subnet 10.8.0.1/24.")]),e._v(" "),a("h4",{attrs:{id:"create-ip-interface-and-routes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#create-ip-interface-and-routes"}},[e._v("#")]),e._v(" Create ip interface and routes")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("ip link add dev wg0 type wireguard\n")])])]),a("p",[e._v('This command creates an interface "wg0" with type '),a("code",[e._v("wireguard")]),e._v(".")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("ip address add dev wg0 10.8.0.1/24\n")])])]),a("p",[e._v('This command assigns IP protocol and address to the interface "wg0".\nIt is essential for the server to know that\nit needs to send traffic with destination "10.8.0.1/24" to interface "wg0".\nYou can use '),a("code",[e._v("ip route")]),e._v(" to verify its effect.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("ip link set up dev wg0\n")])])]),a("p",[e._v('Activate the "wg0" interface. Now, you can see it with '),a("code",[e._v("ifconfig")])]),e._v(" "),a("h4",{attrs:{id:"create-configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#create-configuration"}},[e._v("#")]),e._v(" Create configuration")]),e._v(" "),a("p",[e._v('Edit "/etc/wireguard/wg0.conf" to the following content')]),e._v(" "),a("div",{staticClass:"language-nginx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-nginx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("Interface"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\nListenPort "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v(" \nPrivateKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v(" \n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("Peer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\nPublicKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The public key of peer(client)")]),e._v("\nAllowedIPs "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("10.8")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v(".0")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v(".2")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# I will assign this IP to client in the following sections.")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#[Peer]")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# More peers ...")]),e._v("\n")])])]),a("p",[e._v('Most of the fields here are trivial to fill.\nHowever, the "AllowedIPs" is worth some explanation.\nThis fields denotes what traffic the server is going to send to the client.\nSince I am building a server-client model, the server only needs send client the traffic aiming for the client, thus the field is the client\'s IP.\nIf you are setting up a topology that allows some kind of broadcast within the subnet, then "10.8.0.0/24" would make more sense.')]),e._v(" "),a("p",[e._v('Also, note that "ListenPort" is the used by the kernel implementation to watch for UDP traffic.\nNot TCP it is using, and not from a user space process, so don\'t expect to find the port being opened on those monitoring tool.\nThough, you will see ingress and egress traffic on the port when the VPN is on later.')]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("wg setconf wg0 /etc/wireguard/wg0.conf\n")])])]),a("p",[e._v('This command applies the above configurations to "wg0" interface.\nYou can use "wg show" to')]),e._v(" "),a("h4",{attrs:{id:"firewall-rules"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#firewall-rules"}},[e._v("#")]),e._v(" Firewall rules")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("iptables -A FORWARD -i wg0 -o <ethernet_interface> -j ACCEPT\niptables -t nat -I POSTROUTING -o <ethernet_interface> -j MASQUERADE\n")])])]),a("p",[e._v('These two rules forwards traffics from interface "wg0" to the actual ethernet interface.\nRefer to '),a("a",{attrs:{href:"https://www.digitalocean.com/community/tutorials/how-to-set-up-wireguard-on-ubuntu-20-04#step-5-configuring-the-wireguard-server-s-firewall",target:"_blank",rel:"noopener noreferrer"}},[e._v("DO Wireguard guide"),a("OutboundLink")],1),e._v(" on the explanation and how to get the ethernet interface.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" iptables-persistent\n")])])]),a("p",[e._v("To make those rules persistent to reboot.")]),e._v(" "),a("h4",{attrs:{id:"setup-systemctl-service"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setup-systemctl-service"}},[e._v("#")]),e._v(" Setup systemctl service")]),e._v(" "),a("p",[e._v("The userspace Wireguard tool comes with a nice script "),a("code",[e._v("wg-quick")]),e._v(" and a service "),a("code",[e._v("/lib/systemd/system/wg-quick@.service")]),e._v('.\nWith the help of them, the above created "wg0.conf" can be easily turned into a systemctl service.')]),e._v(" "),a("p",[e._v('Before creating the service for "wg0", we would want to de-active what we have done to it.\nOtherwise, when service starts, some ip settings may duplicate and fail.')]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("wg-quick down wg0 "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# The reverse is "wg-quick up wg0"')]),e._v("\n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("systemctl "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("enable")]),e._v(" wg-quick@wg0 "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# maps to /etc/wireguard/wg0.conf")]),e._v("\nsystemctl start wg-quick@wg0\n")])])]),a("h3",{attrs:{id:"the-client"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-client"}},[e._v("#")]),e._v(" The client")]),e._v(" "),a("p",[e._v("Setup client is very similar to dealing with the server.\nAnyway from the perspective of the protocol, both of them are just Wireguard peers.")]),e._v(" "),a("p",[e._v("I used the Wireguard client from Apple App Store.\nIt turns out that I only need to provide a configuration file, other parts are taken care of by the application itself.")]),e._v(" "),a("p",[e._v("The client configuration looks like this:")]),e._v(" "),a("div",{staticClass:"language-nginx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-nginx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("Interface"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\nPrivateKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\nAddress "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("10.8")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v(".0")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v(".2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("24")]),e._v("\nDNS "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("8.8")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v(".8")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v(".8")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("Peer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\nPublicKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\nAllowedIPs "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.0")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v(".0")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v(".0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("\nEndpoint "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("server_ip"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("server_listen_port"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\nPersistentKeepalive "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("25")]),e._v("\n")])])]),a("p",[e._v('Simply provides "DNS" in the "interface" would allow all the DNS traffic to go through the VPN.\nFor the "AllowedIPS" field, I fill it with wild card because I want to secure all the traffic.\nAlso some are saying "PersistentKeepalive" is important if your peers are behind stateful firewall.')]),e._v(" "),a("h3",{attrs:{id:"debugging"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#debugging"}},[e._v("#")]),e._v(" Debugging")]),e._v(" "),a("p",[e._v("Because the Wireguard implementation resides in the Linux kernel, it almost leaves no trace in the user space.\nThe only approach let Wireguard spit out some logs is through the kernel dynamic debugging.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("echo module wireguard +p > /sys/kernel/debug/dynamic_debug/control\n")])])]),a("p",[e._v('However, on my VM, I found privilege is missing even I execute the command from "root" user, which means the '),a("code",[e._v("debugfs")]),e._v(" is not accessible at all.\nSo, do expect this to happen, if you are also running VMs from service providers.\nFortunately, compared to other alternative technologies, I found Wireguard relatively easier to set up.")]),e._v(" "),a("p",[e._v("Thanks for the reading.")]),e._v(" "),a("h2",{attrs:{id:"reference"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[e._v("#")]),e._v(" Reference")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.digitalocean.com/community/tutorials/how-to-set-up-wireguard-on-ubuntu-20-04",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.digitalocean.com/community/tutorials/how-to-set-up-wireguard-on-ubuntu-20-04"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://www.wireguard.com/quickstart/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.wireguard.com/quickstart/"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=r.exports}}]);