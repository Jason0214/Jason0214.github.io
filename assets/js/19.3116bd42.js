(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{460:function(e,a,s){"use strict";s.r(a);var t=s(43),r=Object(t.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("I was rebuilding "),s("a",{attrs:{href:"https://github.com/roghnin/Interval-Based-Reclamation",target:"_blank",rel:"noopener noreferrer"}},[e._v("Interval-Based-Reclamation"),s("OutboundLink")],1),e._v(" with "),s("code",[e._v("clang")]),e._v(" to adapt it to a microbenchmark for garbage collection with coroutine ("),s("code",[e._v("clang")]),e._v(" has a better coroutine implementation). I made several mistakes which took me a long time to figure out. The mistakes are silly, while the investigation is kinda fun and worth sharing.")]),e._v(" "),s("h2",{attrs:{id:"set-libc-in-linker-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set-libc-in-linker-flags"}},[e._v("#")]),e._v(" Set libc++ in linker flags")]),e._v(" "),s("p",[e._v("The first mistake I made is that I forget to put "),s("code",[e._v("-stdlib=libc++")]),e._v(" in "),s("code",[e._v("LD_FLAGS")]),e._v(".\nTherefore I got a bunch of undefined reference error:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/basic_string.tcc:219: undefined reference to `std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)'\n/usr/bin/ld: ./ext/parharness/libparharness.a(Recorder.o): in function `void std::__cxx11::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::_List_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)':\n...\n")])])]),s("p",[s("a",{attrs:{href:"https://github.com/roghnin/Interval-Based-Reclamation/blob/master/Makefile",target:"_blank",rel:"noopener noreferrer"}},[e._v("Interval-Based-Reclamation"),s("OutboundLink")],1),e._v(" uses Makefile.\nIt separates the compiler flags for source compiling and object linking into "),s("code",[e._v("CXX_FLAGS")]),e._v(" and "),s("code",[e._v("LD_FLAGS")]),e._v(" respectively,\nwhich I failed to notice in the first place.\nYou will need "),s("code",[e._v("-stdlib=libc++")]),e._v(" in "),s("code",[e._v("CXX_FLAGS")]),e._v(" to find headers and in "),s("code",[e._v("LD_FLAGS")]),e._v(" to find the shared libraries.")]),e._v(" "),s("p",[e._v("Actually there is no error information when you link an object using the "),s("code",[e._v("clang")]),e._v(" command.\nI realize the mistake I made only when I turn on compiler verbose mode.")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("CXX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"clang++ -v"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[e._v("2")]),e._v(">")]),s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[e._v("&1")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("grep")]),e._v(" stdc++\n")])])]),s("p",[e._v("I got the log where I saw "),s("code",[e._v("-lstdc++")]),e._v(" in the output of "),s("code",[e._v("ld")]),e._v(" call made by "),s("code",[e._v("clang")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(' "/usr/bin/ld" -pie --eh-frame-hdr -m elf_x86_64 -dynamic-linker /lib64/ld-linux-x86-64.so.2 -o bin/release/main /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../lib64/Scrt1.o /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../lib64/crti.o /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/10.1.0/crtbeginS.o -L./ext/parharness -L/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/10.1.0 -L/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../lib64 -L/usr/bin/../lib64 -L/lib/../lib64 -L/usr/lib/../lib64 -L/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/10.1.0/../../.. -L/usr/bin/../lib -L/lib -L/usr/lib obj/release/src/CustomTests.o obj/release/src/rideables/BonsaiTreeRange.o obj/release/src/rideables/BonsaiTree.o obj/release/src/coroutine.o obj/release/src/main.o -lparharness -lhwloc -lpthread -lm -lrt -lstdc++ -lm -lgcc_s -lgcc -lc -lgcc_s -lgcc /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/10.1.0/crtendS.o /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../lib64/crtn.o\n')])])]),s("h2",{attrs:{id:"verify-libc-is-visible-to-linker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#verify-libc-is-visible-to-linker"}},[e._v("#")]),e._v(" Verify libc++ is visible to linker")]),e._v(" "),s("p",[e._v("After the fix of putting "),s("code",[e._v("-stdlib=libc++")]),e._v(" to link flags, the linking issue persists.\nTherefore, I made further checkups to veiryf libc++ is correctly installed.")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ ldconfig -p "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("grep")]),e._v(" libc++\n")])])]),s("p",[e._v("got")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("\tlibc++abi.so.1 (libc6,x86-64) => /usr/lib/libc++abi.so.1\n\tlibc++abi.so (libc6,x86-64) => /usr/lib/libc++abi.so\n\tlibc++.so.1 (libc6,x86-64) => /usr/lib/libc++.so.1\n")])])]),s("p",[e._v("which is fine.")]),e._v(" "),s("h2",{attrs:{id:"manually-link-libc-abi-on-arch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#manually-link-libc-abi-on-arch"}},[e._v("#")]),e._v(" Manually link libc++abi on Arch")]),e._v(" "),s("p",[e._v("Lot of threads on the web report linking issues building some C++ libraries on Arch Linux because of missing "),s("code",[e._v("libc++abi")]),e._v(".\nFor example, https://github.com/google/filament/issues/16.")]),e._v(" "),s("p",[e._v("In my case, the missing symbols seem to come from "),s("code",[e._v("libc++")]),e._v(" (e.g. std::basic_string), not from "),s("code",[e._v("libc++abi")]),e._v(".\nAnyway I tried put")]),e._v(" "),s("div",{staticClass:"language-Makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[e._v("LD_FLAGS "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+=")]),e._v(" -lc++abi\n")])])]),s("p",[e._v("in linking, it does not solve the issue as expected.")]),e._v(" "),s("h2",{attrs:{id:"use-lld-to-link-shared-libraries"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#use-lld-to-link-shared-libraries"}},[e._v("#")]),e._v(" Use lld to link shared libraries")]),e._v(" "),s("p",[e._v("I suspect that the GNU "),s("code",[e._v("ld")]),e._v(" may have some issues in finding "),s("code",[e._v("libc++")]),e._v(", so I switched to LLVM "),s("code",[e._v("lld")]),e._v(".\nSetup linking flags following "),s("a",{attrs:{href:"https://lld.llvm.org/#using-lld",target:"_blank",rel:"noopener noreferrer"}},[e._v("using-lld"),s("OutboundLink")],1)]),e._v(" "),s("div",{staticClass:"language-Makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[e._v("LD_FLAGS "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+=")]),e._v(" -fuse-ld"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("lld\n")])])]),s("p",[s("code",[e._v("lld")]),e._v(" works surprisingly well. It noticeably increases linking speed and generates error messages that are far more readable.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("ld.lld: error: undefined symbol: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)\n>>> referenced by basic_string.h:1366 (/usr/include/c++/10.1.0/bits/basic_string.h:1366)\n>>>               TestConfig.o:(GlobalTestConfig::parseCommandLine(int, char**)) in archive ./ext/parharness/libparharness.a\n>>> referenced by basic_string.h:1366 (/usr/include/c++/10.1.0/bits/basic_string.h:1366)\n>>>               TestConfig.o:(GlobalTestConfig::parseCommandLine(int, char**)) in archive ./ext/parharness/libparharness.a\n>>> referenced by basic_string.h:1366 (/usr/include/c++/10.1.0/bits/basic_string.h:1366)\n>>>               TestConfig.o:(GlobalTestConfig::setEnv(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)) in archive ./ext/parharness/libparharness.a\n>>> referenced by basic_string.h:1366 (/usr/include/c++/10.1.0/bits/basic_string.h:1366)\n>>>               Recorder.o:(Recorder::reportThreadInfo(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int)) in archive ./ext/parharness/libparharness.a\n>>> referenced by basic_string.h:1366 (/usr/include/c++/10.1.0/bits/basic_string.h:1366)\n>>>               Recorder.o:(Recorder::reportGlobalInfo(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)) in archive ./ext/parharness/libparharness.a\n")])])]),s("p",[e._v("The errors all point to "),s("code",[e._v("./ext/parharness/libparharness.a")]),e._v(" which is built from a submodule of "),s("a",{attrs:{href:"https://github.com/roghnin/Interval-Based-Reclamation/tree/master/ext/parharness",target:"_blank",rel:"noopener noreferrer"}},[e._v("Interval-Based-Reclamation"),s("OutboundLink")],1),e._v(".")]),e._v(" "),s("h2",{attrs:{id:"check-symbols-in-objects"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#check-symbols-in-objects"}},[e._v("#")]),e._v(" Check symbols in objects")]),e._v(" "),s("p",[e._v("I further checks the symbols in each "),s("code",[e._v(".o")]),e._v(" objects that are archived to "),s("code",[e._v("libparharness.a")]),e._v(".\nI realize that "),s("code",[e._v("nm")]),e._v(" is quite handy to check symbols, easier to use than "),s("code",[e._v("objdump")]),e._v(".\nSpecify "),s("code",[e._v("-g")]),e._v(" to only display external symbols and "),s("code",[e._v("-C")]),e._v(" to display a human readable symbol name.")]),e._v(" "),s("p",[e._v("In "),s("code",[e._v("TestConfig.o")]),e._v(", an object from "),s("code",[e._v("libparharness.a")]),e._v(".")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ nm -gC TestConfig.o  "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("grep")]),e._v(" getEnv\n")])])]),s("p",[e._v("got")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("0000000000002d30 T GlobalTestConfig::getEnv(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)\n")])])]),s("p",[e._v("In "),s("code",[e._v("main.o")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ nm -gC main.o | grep getEnv\n")])])]),s("p",[e._v("got")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("                 U GlobalTestConfig::getEnv(std::__1::basic_string<char,std::__1::char_traits<char>, std::__1::allocator<char> >)\n")])])]),s("p",[e._v("a namespace mismatch between "),s("code",[e._v("std::__1::")]),e._v(" and "),s("code",[e._v("std::__cxx11")]),e._v(".\n"),s("code",[e._v("std::__1::")]),e._v(" is the default namespace for "),s("code",[e._v("libc++")]),e._v(" with C++11 plus.\nWhile "),s("code",[e._v("std::__cxx11")]),e._v(" is the default namespace for "),s("code",[e._v("stdlibc++")]),e._v(".")]),e._v(" "),s("p",[e._v("I finally noticed that I made a typo in toggling "),s("code",[e._v("libc++")]),e._v(" in "),s("code",[e._v("libparharness.a")]),e._v(" where I put "),s("code",[e._v("-std=libc++")]),e._v(" instead of "),s("code",[e._v("-stdlib=libc++")]),e._v(".")]),e._v(" "),s("h2",{attrs:{id:"reference"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[e._v("#")]),e._v(" Reference")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://stackoverflow.com/questions/38441490/how-to-check-if-libc-is-installed",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://stackoverflow.com/questions/38441490/how-to-check-if-libc-is-installed"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://stackoverflow.com/questions/3880924/how-to-view-symbols-in-object-files",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://stackoverflow.com/questions/3880924/how-to-view-symbols-in-object-files"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://stackoverflow.com/questions/29293394/where-does-the-1-symbol-come-from-when-using-llvms-libc",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://stackoverflow.com/questions/29293394/where-does-the-1-symbol-come-from-when-using-llvms-libc"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=r.exports}}]);